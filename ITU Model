# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
import math
import numpy as np
import subprocess

def distance (percent):
    # freq is a float number in MHz
    # n is the floor number, 1<= n <=3
    # percent is the device received signal strength
    # s_power is the source power in dbm
    # d_power is received device power in dbm
    # dis is the distance in meter
    # n_p is path loss factor ranging from 2 to 4

    #freq = 5200.0 # in MHz
    n_p = 4
    d_power = (percent / 2) - 100
    dis = math.pow(10, ((-57.4-d_power)/n_p))

    return dis

def estimate_distance(percent, params=None):
    """This function returns an estimated distance range
       given a single radio signal strength (RSS) reading
       (received power measurement) in dBm.


    Parameters:
        power_received (float): RSS reading in dBm
        params (4-tuple float): (d_ref, power_ref, path_loss_exp, stdev_power)
            d_ref is the reference distance in m
            power_ref is the received power at the reference distance
            path_loss_exp is the path loss exponent
            stdev_power is standard deviation of received Power in dB

    Returns:
        (d_est, d_min, d_max): a 3-tuple of float values containing
            the estimated distance, as well as the minimum and maximum
            distance estimates corresponding to the uncertainty in RSS,
            respectively, in meters rounded to two decimal points
    """
    power_received = (percent/ 2) - 100
    if params is None:
        params = (1.0, -53.0, 2.0, 2.5)
          # the above values are arbitrarily chosen "default values"
          # should be changed based on measurements

    d_ref = params[0] # reference distance
    power_ref = params[1] # mean received power at reference distance
    path_loss_exp = params[2] # path loss exponent
    stdev_power = params[3] # standard deviation of received power

    uncertainty = 2*stdev_power # uncertainty in RSS corresponding to 95.45% confidence

    d_est = d_ref*(10**(-(power_received - power_ref)/(10*path_loss_exp)))
    d_min = d_ref*(10**(-(power_received - power_ref + uncertainty)/(10*path_loss_exp)))
    d_max = d_ref*(10**(-(power_received - power_ref - uncertainty)/(10*path_loss_exp)))

    return np.round(d_est,2)

def p_loss_coef (freq):
    # freq is a float number
    # return an integer
    coef = 0
    if (freq == 0.9):
        coef = 33
    elif ((freq>1.2) & (freq<1.3)):
        coef = 32
    elif ((freq>1.8) & (freq<2.0)):
        coef = 30
    elif (freq == 4.0):
        coef = 28
    elif (freq == 5.2):
        coef = 31
    elif (freq == 5.8):
        coef = 24
    elif (freq == 6.0):
        coef = 22
    else:
        print ("error: power loss coefficient unknown")

    return coef

def floor_loss_coef (freq, n):
    # freq is a float number
    # n is an integer, 1<= n <=3
    coef = 0
    if (n==0):
        return coef
    if (freq == 0.9):
        if (n==1):
            coef = 9
        elif (n==2):
            coef = 19
        elif (n==3):
            coef = 24
    elif ((freq>1.8) & (freq<2.0)):
        coef = 15 + 4*(n-1)
    elif (freq == 5.2 & n==1):
        coef = 16
    elif (freq == 5.8):
        if (n==1):
            coef = 22
        elif (n==2):
            coef = 28

    return coef

def trilateration(P1, P2, P3, r1, r2, r3):

  p1 = np.array([0, 0, 0])
  p2 = np.array([P2[0] - P1[0], P2[1] - P1[1], P2[2] - P1[2]])
  p3 = np.array([P3[0] - P1[0], P3[1] - P1[1], P3[2] - P1[2]])
  v1 = p2 - p1
  v2 = p3 - p1

  Xn = (v1)/np.linalg.norm(v1)

  tmp = np.cross(v1, v2)

  Zn = (tmp)/np.linalg.norm(tmp)

  Yn = np.cross(Xn, Zn)

  i = np.dot(Xn, v2)
  d = np.dot(Xn, v1)
  j = np.dot(Yn, v2)

  X = ((r1**2)-(r2**2)+(d**2))/(2*d)
  Y = (((r1**2)-(r3**2)+(i**2)+(j**2))/(2*j))-((i/j)*(X))
  Z1 = np.sqrt(max(0, r1**2-X**2-Y**2))
  Z2 = -Z1

  K1 = P1 + X * Xn + Y * Yn + Z1 * Zn
  #K2 = P1 + X * Xn + Y * Yn + Z2 * Zn
  return K1


command = "netsh wlan show networks mode=bssid"
ipconfig = subprocess.Popen(command, stdout=subprocess.PIPE)
ssid1 = 'drewphone'
ssid2 = 'dotingapple'
ssid3 = 'iPhone13'
ssid4 = 'bunger'
bssid = 'BSSID'
signal = b'Signal'
channel = b'Channel'
ssids = [dict() for x in range(4)]


command = "netsh wlan show networks mode=bssid"
ipconfig = subprocess.getoutput(command)
splitoutput = ipconfig.splitlines()
count = 0
for i in range(len(splitoutput)):
    if (ssid1 in splitoutput[i]) or (ssid2 in splitoutput[i]) or (ssid3 in splitoutput[i]) or (ssid4 in splitoutput[i]):
        ssids[count]["SSID"] = splitoutput[i].split()[3]
        ssids[count]["Signal"] = splitoutput[i + 5].split()[2]
        ssids[count]["Channel"] = splitoutput[i + 7].split()[2]
        count+=1



print(ssids[0])
print(ssids[1])
print(ssids[2])
print(ssids[3])
per0 = 0
per1 = 0
per2 = 0

for dict in ssids:
    for key in dict:
        if key == "SSID":
            if dict["SSID"] == 'drewphone':
                per0 = int(dict["Signal"].rstrip('%'))

            if dict["SSID"] == 'dotingapple':
                per1 = int(dict["Signal"].rstrip('%'))

            if dict["SSID"] == 'iPhone13':
                per2 = int(dict["Signal"].rstrip('%'))


print(per0)
print(per1)
print(per2)
p1 = (0, 0, 0)  # Coordinates of the first point drewphone
p2 = (6, 0, 0)  # Coordinates of the second point dotingapple
p3 = (0, 5.4, 0)  # Coordinates of the third point iPhone13
d1 = estimate_distance(per0)  # Distance from the first point to the target point
d2 = estimate_distance(per1)  # Distance from the second point to the target point
d3 = estimate_distance(per2)  # Distance from the third point to the target point
print(d1)
print(d2)
print(d3)

x= trilateration(p1, p2, p3, d1, d2, d3)
print("Computed Coordinates (x, y, z):", (x))
